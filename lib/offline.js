// Generated by CoffeeScript 1.3.3
(function() {
  var NsOfflineClient, NsOfflineSession, rpc, xml,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  rpc = require('./rpc');

  xml = require('./xml');

  NsOfflineClient = (function(_super) {

    __extends(NsOfflineClient, _super);

    function NsOfflineClient() {
      NsOfflineClient.__super__.constructor.apply(this, arguments);
      this.session = {};
    }

    NsOfflineClient.prototype.olcr = function(path, query, options, cb) {
      var headers, _ref,
        _this = this;
      if (options == null) {
        options = {};
      }
      headers = {
        'user-agent': 'Suite-n-SOUR.js (Netsuite Offline Client)'
      };
      if (options.version) {
        query.offlineversion = (_ref = this.session.version) != null ? _ref : options.version;
      }
      if (options.lastSync) {
        if (typeof options.lastSync === 'object') {
          query.lastsynctime = this.session.formatDate(options.lastSync);
        } else if (typeof options.lastSync === 'string') {
          query.lastsynctime = options.lastSync;
        }
      }
      return this.get(path, {
        query: query,
        headers: headers
      }, function(res) {
        console.log(res);
        if (xml.verify(res.body)) {
          return res.parseBody('xml', cb);
        } else {
          return cb(null, res);
        }
      });
    };

    NsOfflineClient.prototype.login = function() {
      var cb, email, extra, extras, k, password, query, v, _i, _j, _len,
        _this = this;
      email = arguments[0], password = arguments[1], extras = 4 <= arguments.length ? __slice.call(arguments, 2, _i = arguments.length - 1) : (_i = 2, []), cb = arguments[_i++];
      query = {
        email: email,
        password: password
      };
      for (_j = 0, _len = extras.length; _j < _len; _j++) {
        extra = extras[_j];
        for (k in extra) {
          v = extra[k];
          query[k] = v;
        }
      }
      return this.get('/app/login/nlofflinelogin.nl', {
        query: query
      }, function(res) {
        return res.parseBody('xml', function(parsed) {
          if (parsed.loginresult.status === 'success') {
            _this.session = new NsOfflineSession(email, parsed.loginresult, res.cookies);
          }
          return cb(parsed, res);
        });
      });
    };

    NsOfflineClient.prototype.loginAs = function(email, password, version, nkey, cb) {
      return this.login(email, password, {
        offlineversion: version,
        kemaillogin: nkey
      }, cb);
    };

    NsOfflineClient.prototype.logout = function() {
      var cb, noback, uri, _i;
      noback = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), cb = arguments[_i++];
      if (noback) {
        uri = '/pages/nllogoutnoback.jsp';
      } else {
        uri = '/pages/nllogout.jsp';
      }
      return this.get('/pages/nllogoutnoback.jsp', {}, cb);
    };

    NsOfflineClient.prototype.syncCardMetaData = function(cb) {
      return this.olcr('/app/offline/cardsyncer.nl', {}, {}, cb);
    };

    NsOfflineClient.prototype.syncCodeMetaData = function(cb) {
      return this.olcr('/app/offline/codesyncer.nl', {}, {}, cb);
    };

    NsOfflineClient.prototype.syncRecordTypeMetaData = function(recordType, cb) {
      return this.olcr('/app/offline/metadatasyncer.nl', {
        recordType: recordType
      }, {
        version: true
      }, cb);
    };

    NsOfflineClient.prototype.syncConflictAnnotations = function(cb) {
      return this.olcr('/app/offline/conflictsyncer.nl', {}, {}, cb);
    };

    NsOfflineClient.prototype.downloadCardPage = function(sectionId, cb) {
      return this.olcr('/app/center/card.nl', {
        sc: sectionId
      }, {
        version: true
      }, cb);
    };

    NsOfflineClient.prototype.downloadStaticRecords = function(recordType, cb) {
      return this.olcr('/app/offline/staticrecordsyncer.nl', {
        download: 'T',
        getids: 'T',
        type: recordType
      }, {}, cb);
    };

    NsOfflineClient.prototype.downloadCrossReferences = function(recordType, lastSync, cb) {
      return this.olcr('/app/offline/crossreferencesyncer.nl', {
        getids: 'T',
        type: recordType
      }, {
        lastSync: lastSync
      }, cb);
    };

    return NsOfflineClient;

  })(rpc.Client);

  NsOfflineSession = (function() {

    function NsOfflineSession(email, loginresult, cookies) {
      var _ref, _ref1, _ref2, _ref3;
      this.email = email;
      this.auth = cookies != null ? cookies : {
        JSESSIONID: null,
        NS_VER: null
      };
      this.nkey = (_ref = loginresult.kemaillogin) != null ? _ref : null;
      this.dateFormat = (_ref1 = loginresult.dateformat) != null ? _ref1 : null;
      this.version = (_ref2 = (_ref3 = loginresult.version) != null ? _ref3 : cookies.NS_VER) != null ? _ref2 : null;
    }

    NsOfflineSession.prototype.formatDate = function(date) {
      var df;
      if (date == null) {
        date = new Date();
      }
      if (typeof date !== 'object') {
        date = new Date(Date.parse(date));
      }
      if (this.dateFormat) {
        return df = this.dateFormat.replace(/YYYY/i, date.getFullYear()).replace(/YY/i, date.getYear()).replace(/MM/i, date.getMonth() + 1).replace(/DD/i, date.getDate());
      }
    };

    return NsOfflineSession;

  })();

  module.exports = {
    Client: NsOfflineClient,
    Session: NsOfflineSession
  };

}).call(this);
