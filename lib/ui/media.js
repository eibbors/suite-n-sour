// Generated by CoffeeScript 1.3.3
(function() {
  var MediaFile, NS_FILETYPES, NS_TEXTFILE_ENCODING, fs;

  fs = require('fs');

  NS_TEXTFILE_ENCODING = {
    UTF8: {
      id: 'UTF-8',
      desc: 'Unicode (UTF-8)'
    },
    WINDOWS: {
      id: 'windows-1252',
      desc: 'Western (Windows 1252)'
    },
    ISO: {
      id: 'ISO-8859-1',
      desc: 'Western (ISO-8859-1)'
    },
    GB: {
      id: 'GB18030',
      desc: 'Chinese Simplified (GB18030)'
    },
    SHIFTJIS: {
      id: 'SHIFT_JIS',
      desc: 'Japanese (Shift-JIS)'
    },
    MACROMAN: {
      id: 'MacRoman',
      desc: 'Western (Mac Roman)'
    }
  };

  NS_FILETYPES = ["_AUTOCAD", "_BMPIMAGE", "_CONFIG", "_CSV", "_EXCEL", "_FLASH", "_GIFIMAGE", "_GZIP", "_HTMLDOC", "_ICON", "_IMAGE", "_JAVASCRIPT", "_JPGIMAGE", "_JSON", "_MESSAGERFC", "_MISCBINARY", "_MISCTEXT", "_MP3", "_MPEGMOVIE", "_MSPROJECT", "_PDF", "_PJPGIMAGE", "_PLAINTEXT", "_PNGIMAGE", "_POSTSCRIPT", "_POWERPOINT", "_QUICKTIME", "_RTF", "_SMS", "_STYLESHEET", "_TAR", "_TARCOMP", "_TIFFIMAGE", "_VISIO", "_WEBAPPPAGE", "_WEBAPPSCRIPT", "_WORD", "_XMLDOC", "_ZIP"];

  MediaFile = (function() {

    function MediaFile(options) {
      var _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
      if (options == null) {
        options = {};
      }
      this.id = (_ref = options.id) != null ? _ref : null;
      this.filetype = (_ref1 = options.type) != null ? _ref1 : 'DOCUMENT';
      this.folder = (_ref2 = options.folder) != null ? _ref2 : null;
      this.encoding = (_ref3 = (_ref4 = (_ref5 = options.encoding) != null ? _ref5.id : void 0) != null ? _ref4 : options.encoding) != null ? _ref3 : NS_TEXTFILE_ENCODING.UTF8.id;
      this.url = (_ref6 = options.url) != null ? _ref6 : null;
      this.filename = (_ref7 = options.filename) != null ? _ref7 : "mf" + ((new Date).getTime().toString(16));
      this.type = (_ref8 = options.type) != null ? _ref8 : 'text/plain';
      this.value = (_ref9 = options.value) != null ? _ref9 : null;
    }

    MediaFile.prototype.getMPFormParams = function(obj) {
      var k, v, _ref;
      if (obj == null) {
        obj = {};
      }
      for (k in this) {
        v = this[k];
        if (k === 'id' || k === 'filetype' || k === 'folder' || k === 'encoding' || k === 'url') {
          obj.fields[k] = v != null ? v : '';
        }
      }
      if (this.url === null) {
        if ((_ref = obj.files) == null) {
          obj.files = {};
        }
        obj.files['mediafile'] = {
          filename: this.filename,
          type: this.type,
          value: this.value
        };
      }
      return obj;
    };

    MediaFile.prototype.loadFile = function(file, type, cb) {
      var _ref,
        _this = this;
      if ((_ref = this.filename) == null) {
        this.filename = file.substr(Math.max(file.indexOf('/'), file.indexOf('\\'), 0));
      }
      this.type = type != null ? type : 'text/plain';
      if (typeof cb === 'function') {
        fs.readFile(file, function(err, data) {
          return _this.value = data.toString('utf-8');
        });
      } else {
        this.value = fs.readFileSync(file);
      }
      return this;
    };

    return MediaFile;

  })();

  exports.extend = function(client) {
    client.prototype.getMediaFile = function(id, company, hash, cb) {
      var query;
      query = {
        id: id,
        c: company,
        h: hash
      };
      return this.get('/core/media/media.nl', {
        query: query
      }, cb);
    };
    client.prototype.downloadMediaFile = function(id, company, hash, cb) {
      var query;
      query = {
        id: id,
        c: company,
        h: hash,
        _xd: 'T'
      };
      return this.get('/core/media/media.nl', {
        query: query
      }, cb);
    };
    client.prototype.previewMediaFile = function(id, cb) {
      return this.get('/core/media/previewmedia.nl', {
        query: {
          id: id
        }
      }, function(res) {
        if (res.followRedirect != null) {
          return res.followRedirect(cb);
        } else {
          return cb(res);
        }
      });
    };
    client.prototype.downloadMediaFolder = function(id, cb) {
      var query;
      query = {
        id: id,
        _xd: 'T',
        e: 'T'
      };
      return this.get('/core/media/downloadfolder.nl', {
        query: query
      }, cb);
    };
    client.prototype.checkMediaExists = function(filename, folder, cb) {
      var query,
        _this = this;
      query = {
        name: filename,
        folder: folder,
        formname: 'suite-n-sour'
      };
      return this.get('/app/common/media/checkmediaexists.nl', {
        query: query
      }, function(res) {
        return cb(/A file with the same name already exists/.test(res.body), res);
      });
    };
    client.prototype.canCreateFolder = function(folderName, parentId, cb) {
      var path;
      path = '/app/common/media/checkmediaservice.nl';
      return this.jsonr('canCreateFolder', [folderName, parentId, true], {
        path: path
      }, cb);
    };
    client.prototype.getSiteMedia = function(id, cb) {
      return this.get('/app/site/media/sitemedia.nl', {
        query: {
          id: id,
          c: 'NLCORP'
        }
      }, cb);
    };
    client.prototype.copyMediaFiles = function(fileIds, srcFolder, destFolder, overwrite, cb) {
      var body, fid, query;
      if (fileIds == null) {
        fileIds = [];
      }
      if (overwrite == null) {
        overwrite = true;
      }
      query = {
        folder: srcFolder,
        _grpCopy: 'T',
        newfolder: destFolder,
        overwrite: overwrite
      };
      body = ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = fileIds.length; _i < _len; _i++) {
          fid = fileIds[_i];
          _results.push("sa" + fid + "fldF=T");
        }
        return _results;
      })()).join('&');
      return this.post('/app/common/media/mediaitemfolders.nl', {
        query: query,
        body: body
      }, cb);
    };
    client.prototype.moveMediaFiles = function(fileIds, srcFolder, destFolder, overwrite, cb) {
      var body, fid, query;
      if (fileIds == null) {
        fileIds = [];
      }
      if (overwrite == null) {
        overwrite = true;
      }
      query = {
        folder: srcFolder,
        _grpMove: 'T',
        newfolder: destFolder,
        overwrite: overwrite
      };
      body = ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = fileIds.length; _i < _len; _i++) {
          fid = fileIds[_i];
          _results.push("sa" + fid + "fldF=T");
        }
        return _results;
      })()).join('&');
      return this.post('/app/common/media/mediaitemfolders.nl', {
        query: query,
        body: body
      }, cb);
    };
    client.prototype.deleteMediaFiles = function(fileIds, srcFolder, overwrite, cb) {
      var body, fid, query;
      if (fileIds == null) {
        fileIds = [];
      }
      if (overwrite == null) {
        overwrite = true;
      }
      query = {
        folder: srcFolder,
        _grpDelete: 'T',
        newfolder: destFolder,
        overwrite: overwrite
      };
      body = ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = fileIds.length; _i < _len; _i++) {
          fid = fileIds[_i];
          _results.push("sa" + fid + "fldF=T");
        }
        return _results;
      })()).join('&');
      return this.post('/app/common/media/mediaitemfolders.nl', {
        query: query,
        body: body
      }, cb);
    };
    client.prototype.createMediaFolder = function(name, folder, parentFolder, options, cb) {
      var query, _ref, _ref1;
      query = {
        name: name,
        folder: folder,
        parent_display: parentFolder,
        foldertype: "DEFAULT",
        type: "filecabinet",
        inpt_foldertype: "Documents and Files",
        description: (_ref = options.description) != null ? _ref : "",
        inpt_group: (_ref1 = options.group) != null ? _ref1 : "",
        isprivate: options.isprivate ? 'T' : 'F'
      };
      return this.formr('/app/common/media/mediaitemfolder.nl?parent=' + folder, query, cb);
    };
    client.prototype.addMediaFile = function(mediafile, options, cb) {
      var fields;
      fields = {
        isonline: options.isonline ? 'T' : 'F',
        isinactive: options.isinactive ? 'T' : 'F',
        unzip: options.unzip ? 'T' : 'F',
        overwrite: options.overwrite ? 'T' : 'F'
      };
      if (mediafile.getMPFormParams == null) {
        mediafile = new MediaFile(mediafile);
      }
      return this.mpformr('/app/common/media/importmediabatch.nl', mediafile.getMPFormParams({
        fields: fields
      }), cb);
    };
    client.prototype.addMediaLink = function(url, folder, options, cb) {
      var fields, _ref, _ref1, _ref2;
      fields = {
        url: url,
        folder: folder,
        type: (_ref = options.type) != null ? _ref : 'filecabinet',
        textfileencoding: (_ref1 = options.textfileencoding) != null ? _ref1 : NS_TEXTFILE_ENCODING.UTF8.id,
        encoding: (_ref2 = options.encoding) != null ? _ref2 : NS_TEXTFILE_ENCODING.UTF8.id,
        unzip: options.unzip ? 'T' : 'F',
        overwrite: options.overwrite ? 'T' : 'F',
        submitted: 'T'
      };
      return this.mpformr('/app/common/media/importmediabatch.nl', {
        fields: fields
      }, cb);
    };
    return {
      ENCODING: NS_TEXTFILE_ENCODING,
      File: MediaFile
    };
  };

}).call(this);
