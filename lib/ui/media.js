// Generated by CoffeeScript 1.3.3
(function() {

  exports.extend = function(client) {
    client.prototype.getMediaFile = function(id, company, hash, cb) {
      var query;
      query = {
        id: id,
        c: company,
        h: hash
      };
      return this.get('/core/media/media.nl', {
        query: query
      }, cb);
    };
    client.prototype.downloadMediaFile = function(id, company, hash, cb) {
      var query;
      query = {
        id: id,
        c: company,
        h: hash,
        _xd: 'T'
      };
      return this.get('/core/media/media.nl', {
        query: query
      }, cb);
    };
    client.prototype.previewMediaFile = function(id, cb) {
      return this.get('/core/media/previewmedia.nl', {
        query: {
          id: id
        }
      }, function(res) {
        if (res.followRedirect != null) {
          return res.followRedirect(cb);
        } else {
          return cb(res);
        }
      });
    };
    client.prototype.downloadMediaFolder = function(id, cb) {
      var query;
      query = {
        id: id,
        _xd: 'T',
        e: 'T'
      };
      return this.get('/core/media/downloadfolder.nl', {
        query: query
      }, cb);
    };
    client.prototype.mediaExists = function(filename, folder, cb) {
      var query,
        _this = this;
      query = {
        name: filename,
        folder: folder,
        formname: 'suite-n-sour'
      };
      return this.get('/app/common/media/checkmediaexists.nl', {
        query: query
      }, function(res) {
        return cb(/A file with the same name already exists/.test(res.body), res);
      });
    };
    client.prototype.getSiteMedia = function(id, cb) {
      return this.get('/app/site/media/sitemedia.nl', {
        query: {
          id: id,
          c: 'NLCORP'
        }
      }, cb);
    };
    client.prototype.copyMediaFiles = function(fileIds, srcFolder, destFolder, overwrite, cb) {
      var body, fid, query;
      if (fileIds == null) {
        fileIds = [];
      }
      if (overwrite == null) {
        overwrite = true;
      }
      query = {
        folder: srcFolder,
        _grpCopy: 'T',
        newfolder: destFolder,
        overwrite: overwrite
      };
      body = ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = fileIds.length; _i < _len; _i++) {
          fid = fileIds[_i];
          _results.push("sa" + fid + "fldF=T");
        }
        return _results;
      })()).join('&');
      return this.post('/app/common/media/mediaitemfolders.nl', {
        query: query,
        body: body
      }, cb);
    };
    client.prototype.moveMediaFiles = function(fileIds, srcFolder, destFolder, overwrite, cb) {
      var body, fid, query;
      if (fileIds == null) {
        fileIds = [];
      }
      if (overwrite == null) {
        overwrite = true;
      }
      query = {
        folder: srcFolder,
        _grpMove: 'T',
        newfolder: destFolder,
        overwrite: overwrite
      };
      body = ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = fileIds.length; _i < _len; _i++) {
          fid = fileIds[_i];
          _results.push("sa" + fid + "fldF=T");
        }
        return _results;
      })()).join('&');
      return this.post('/app/common/media/mediaitemfolders.nl', {
        query: query,
        body: body
      }, cb);
    };
    client.prototype.deleteMediaFiles = function(fileIds, srcFolder, overwrite, cb) {
      var body, fid, query;
      if (fileIds == null) {
        fileIds = [];
      }
      if (overwrite == null) {
        overwrite = true;
      }
      query = {
        folder: srcFolder,
        _grpDelete: 'T',
        newfolder: destFolder,
        overwrite: overwrite
      };
      body = ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = fileIds.length; _i < _len; _i++) {
          fid = fileIds[_i];
          _results.push("sa" + fid + "fldF=T");
        }
        return _results;
      })()).join('&');
      return this.post('/app/common/media/mediaitemfolders.nl', {
        query: query,
        body: body
      }, cb);
    };
    return client.prototype.importMediaFile = function(data) {
      var body, params;
      params = [];
      body = params.join("" + boundary + "Content Disposition: form-data; name=\"" + param + "\"");
      return this.post('/app/common/media/importmediabatch.nl', {
        headers: "multipart/form-data; boundary=" + boundary,
        body: body
      });
    };
  };

}).call(this);
