// Generated by CoffeeScript 1.3.3
(function() {
  var Search, SearchColumn, SearchFilter, SearchResults,
    __slice = [].slice;

  Search = (function() {

    function Search(type, searchId, filters, columns) {
      this.type = type;
      this.searchId = searchId;
      this.filters = filters != null ? filters : [];
      this.columns = columns != null ? columns : [];
      this.isPublic = false;
      this.scriptId = null;
      return this;
    }

    Search.prototype.extract = function(result) {
      var i, _ref, _ref1, _ref2;
      this.searchId = (_ref = result.searchId) != null ? _ref : -1;
      this.isPublic = (_ref1 = result.ispublic) != null ? _ref1 : false;
      this.scriptId = (_ref2 = result.scriptid) != null ? _ref2 : null;
      this.filters = (function() {
        var _i, _ref3, _results;
        _results = [];
        for (i = _i = 0, _ref3 = result.filtercount; 0 <= _ref3 ? _i < _ref3 : _i > _ref3; i = 0 <= _ref3 ? ++_i : --_i) {
          _results.push(new SearchFilter(result["filter" + i]));
        }
        return _results;
      })();
      this.columns = (function() {
        var _i, _ref3, _results;
        _results = [];
        for (i = _i = 0, _ref3 = result.columncount; 0 <= _ref3 ? _i < _ref3 : _i > _ref3; i = 0 <= _ref3 ? ++_i : --_i) {
          _results.push(new SearchColumn(result["column" + i]));
        }
        return _results;
      })();
      return this;
    };

    Search.prototype.fltr = function() {
      var extras, nameOrObj, obj, _i, _len, _ref, _ref1, _results;
      nameOrObj = arguments[0], extras = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if ((_ref = this.filters) == null) {
        this.filters = [];
      }
      if (typeof nameOrObj === 'object') {
        _ref1 = [nameOrObj].concat(extras);
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          obj = _ref1[_i];
          _results.push(this.filters.push(new SearchFilter(obj)));
        }
        return _results;
      } else {
        return filters.push(new SearchFilter.apply(arguments));
      }
    };

    return Search;

  })();

  SearchFilter = (function() {

    function SearchFilter() {
      var join, k, name, obj, operator, options, v, values, _i, _j, _len, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      name = arguments[0], join = arguments[1], operator = arguments[2], values = 5 <= arguments.length ? __slice.call(arguments, 3, _i = arguments.length - 1) : (_i = 3, []), options = arguments[_i++];
      this.name = name;
      this.join = join != null ? join : null;
      this.operator = operator != null ? operator : null;
      this.values = values;
      if (arguments.length === 1) {
        obj = arguments[0];
        for (v = _j = 0, _len = obj.length; _j < _len; v = ++_j) {
          k = obj[v];
          this[k] = v;
        }
      } else {
        this.formula = (_ref = options.formula) != null ? _ref : null;
        this.summarytype = (_ref1 = options.summarytype) != null ? _ref1 : null;
        this.isor = (_ref2 = options.isor) != null ? _ref2 : false;
        this.isnot = (_ref3 = options.isnot) != null ? _ref3 : false;
        this.leftparens = (_ref4 = options.leftparens) != null ? _ref4 : 0;
        this.rightparens = (_ref5 = options.rightparens) != null ? _ref5 : 0;
      }
      return this;
    }

    SearchFilter.prototype.addValue = function() {
      var values;
      values = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.values = this.values.concat(values);
      return this;
    };

    return SearchFilter;

  })();

  SearchColumn = (function() {

    function SearchColumn(name, join, summary, options) {
      var k, obj, v, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8;
      this.name = name;
      this.join = join != null ? join : null;
      this.summary = summary != null ? summary : null;
      if (options == null) {
        options = {};
      }
      if (arguments.length === 1) {
        obj = arguments[0];
        for (v = _i = 0, _len = obj.length; _i < _len; v = ++_i) {
          k = obj[v];
          this[k] = v;
        }
      } else {
        this.type = (_ref = options.type) != null ? _ref : null;
        this.label = (_ref1 = options.label) != null ? _ref1 : null;
        this.sortdir = (_ref2 = options.sortdir) != null ? _ref2 : null;
        this.index = (_ref3 = options.index) != null ? _ref3 : -1;
        this.functionid = (_ref4 = options.functionid) != null ? _ref4 : null;
        this.formula = (_ref5 = options.formula) != null ? _ref5 : null;
        this.userindex = (_ref6 = options.userindex) != null ? _ref6 : -1;
        this.whenorderedby = (_ref7 = options.whenorderedby) != null ? _ref7 : null;
        this.whenorderedbyjoin = (_ref8 = options.whenorderedbyjoin) != null ? _ref8 : null;
      }
      return this;
    }

    return SearchColumn;

  })();

  SearchResults = (function() {

    function SearchResults(result) {
      var _ref, _ref1;
      if (result == null) {
        result = {};
      }
      this.columns = (_ref = result.columns) != null ? _ref : [];
      this.rows = (_ref1 = result.rows) != null ? _ref1 : [];
    }

    SearchResults.prototype.getRowObjects = function() {
      var cell, obj, row, _i, _j, _len, _len1, _ref, _ref1, _results;
      _ref = this.rows;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        row = _ref[_i];
        obj = {
          id: row.id,
          recordType: row.recordType
        };
        _ref1 = row.cells;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          cell = _ref1[_j];
          obj[cell.name] = cell.value;
        }
        _results.push(obj);
      }
      return _results;
    };

    SearchResults.prototype.buildArray = function(inclHeader) {
      var cell, col, row, table, tr, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      if (inclHeader == null) {
        inclHeader = true;
      }
      table = [];
      if (inclHeader) {
        table.push([]);
        _ref = this.columns;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          col = _ref[_i];
          table[0][col.index - 1] = col.name;
        }
      }
      _ref1 = this.rows;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        row = _ref1[_j];
        tr = [];
        _ref2 = row.cells;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          cell = _ref2[_k];
          tr[cell.index - 1] = cell.value;
        }
        table.push(tr);
      }
      return table;
    };

    return SearchResults;

  })();

  exports.extend = function(client) {
    client.prototype.searchGlobal = function(keywords, cb) {
      return this.jsonr('searchGlobal', [keywords], {}, function(res) {
        return cb(new SearchResults(res != null ? res.result : void 0), res);
      });
    };
    client.prototype.searchDuplicate = function(type, fields, id, cb) {
      if (isNaN(id)) {
        id = -1;
      }
      return this.jsonr('searchDuplicate', [type, id, fields], {}, cb);
    };
    client.prototype.getSearchColumns = function(type, filter, op, cb) {
      return this.jsonr('getSearchColumns', [type, filter, op], {}, function(res) {
        return cb(res.result, res);
      });
    };
    client.prototype.buildSearchFilterExpression = function() {
      var cb, filter, filterSet, filters, _i, _j, _len;
      filters = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), cb = arguments[_i++];
      filterSet = [];
      for (_j = 0, _len = filters.length; _j < _len; _j++) {
        filter = filters[_j];
        if (Array.isArray(filter)) {
          filterSet = filterSet.concat(filter);
        } else {
          filterSet.push(filter);
        }
      }
      return this.jsonr('buildSearchFilterExpression', [filterSet], {
        method: 'POST'
      }, cb);
    };
    client.prototype.parseSearchFilterExpression = function(filterExpression, cb) {
      return this.jsonr('parseSearchFilterExpression', [filterExpression], {
        method: 'POST'
      }, cb);
    };
    client.prototype.searchRecord = function(type, id, filters, columns, cb) {
      if (filters == null) {
        filters = [];
      }
      if (columns == null) {
        columns = [];
      }
      if (!Array.isArray(filters)) {
        filters = [filters];
      }
      if (!Array.isArray(columns)) {
        columns = [columns];
      }
      return this.jsonr('searchRecord', [type, id, filters, columns], {
        method: 'POST'
      }, function(res) {
        return cb(new SearchResults(res != null ? res.result : void 0), res);
      });
    };
    client.prototype.loadSearch = function(type, searchId, cb) {
      return this.jsonr('loadSearch', [type, searchId], {}, function(res) {
        var s;
        s = new Search(type, searchId, [], []).extract(res.result);
        return cb(s, res);
      });
    };
    client.prototype.saveSearch = function(title, search, cb) {
      var args;
      args = [title, search.scriptId, search.type, search.searchId, search.filters, search.columns, search.isPublic];
      return this.jsonr('saveSearch', args, {}, cb);
    };
    client.prototype.deleteSearch = function(type, searchId, cb) {
      return this.jsonr('deleteSearch', [type, searchId], {}, cb);
    };
    client.prototype.prepareSearchPage = function(type, searchId, filters, columns, cb) {
      if (filters == null) {
        filters = [];
      }
      if (columns == null) {
        columns = [];
      }
      return this.jsonr('prepareSearchPage', [type, searchId, filters, columns], {}, cb);
    };
    client.prototype.prepareSearchResults = function(type, searchId, filters, columns, cb) {
      if (filters == null) {
        filters = [];
      }
      if (columns == null) {
        columns = [];
      }
      return this.jsonr('prepareSearchResults', [type, searchId, filters, columns], {}, cb);
    };
    client.prototype.searchRecordSlice = function(type, searchId, filters, columns, start, end, cb) {
      if (filters == null) {
        filters = [];
      }
      if (columns == null) {
        columns = [];
      }
      return this.jsonr('searchRecordSlice', [type, searchId, filters, columns, start, end], {}, cb);
    };
    return {
      Search: Search,
      Column: SearchColumn,
      Filter: SearchFilter,
      Results: SearchResults
    };
  };

}).call(this);
