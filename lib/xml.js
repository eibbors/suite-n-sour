// Generated by CoffeeScript 1.3.3
(function() {
  var SimpleType, cdata, escapeXML, parseXML, qname, renderXML, verifyXML, xml2js,
    __slice = [].slice;

  xml2js = require('xml2js');

  verifyXML = function(str, simple) {
    var begx, res, xmlv;
    if (simple == null) {
      simple = false;
    }
    if (simple) {
      return /\S/.exec(str)[0] === '<';
    }
    xmlv = /<\?xml(\s+(\S+)=.(\S+).\s+(\S+)=.(\S+).)?.*\?>/gi.exec(str);
    if (xmlv) {
      res = {
        matched: xmlv[0]
      };
      if (xmlv[2]) {
        res[xmlv[2]] = xmlv[3];
      }
      if (xmlv[4]) {
        res[xmlv[4]] = xmlv[5];
      }
    } else {
      begx = /^\s*((<!--.*-->)|(<(\w+).*>))/gi.exec(str);
      if (begx) {
        res = {
          matched: begx
        };
      }
    }
    return res || false;
  };

  parseXML = function(str, cb, options) {
    var parser;
    if (options == null) {
      options = {
        explicitRoot: true,
        normalize: false,
        trim: false
      };
    }
    parser = new xml2js.Parser(options);
    return parser.parseString(str, function(err, res) {
      if (!err) {
        return cb(err, res);
      } else {
        return cb(err, str);
      }
    });
  };

  renderXML = function(obj) {
    var ai, ak, av, key, pload, sibl, value, _i, _len, _ref;
    pload = '';
    for (key in obj) {
      value = obj[key];
      switch (typeof value) {
        case 'object':
          if (value === null) {
            continue;
          } else if (Array.isArray(value)) {
            for (_i = 0, _len = value.length; _i < _len; _i++) {
              ai = value[_i];
              sibl = {};
              sibl[key] = ai;
              pload += "" + (renderXML(sibl));
            }
          } else {
            pload += "<" + key;
            if (value['@'] != null) {
              if (typeof value['@'] === 'object') {
                _ref = value['@'];
                for (ak in _ref) {
                  av = _ref[ak];
                  if (typeof av === 'undefined') {
                    pload += " " + ak;
                  } else {
                    pload += " " + ak + "=\"" + av + "\"";
                  }
                }
              } else {
                pload += " " + value['@'];
              }
              delete value['@'];
              if (value['=']) {
                pload += ">" + value['='] + "</" + key + ">";
                continue;
              }
            }
            if (value.constructor === 'Date') {
              pload += ">" + (value.toGMTString()) + "</" + key + ">";
            } else {
              pload += ">" + (renderXML(value)) + "</" + key + ">";
            }
          }
          break;
        case 'function':
          pload += "<" + key + ">" + (value()) + "</" + key + ">";
          break;
        case 'undefined':
          pload += "<" + key + "/>";
          break;
        default:
          pload += "<" + key + ">" + value + "</" + key + ">";
      }
    }
    return pload;
  };

  escapeXML = function(str) {
    return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/(?:)/ > g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&apos;');
  };

  cdata = function(value, escape) {
    var k, v;
    if (escape == null) {
      escape = true;
    }
    if (typeof value === 'object') {
      for (k in value) {
        v = value[k];
        value[k] = cdata(v);
      }
    } else {
      if (!/^\s*<!\[CDATA\[/.test(value)) {
        value = "<![CDATA[" + value + "]]>";
      }
    }
    return value;
  };

<<<<<<< HEAD
  Element = (function() {

    function Element(name, options) {
      var _ref, _ref1, _ref2, _ref3;
      this.name = name;
      if (typeof options === 'object') {
        this.attributes = (_ref = (_ref1 = options.attributes) != null ? _ref1 : options['@']) != null ? _ref : {};
        this.value = (_ref2 = options.value) != null ? _ref2 : void 0;
        this.type = (_ref3 = options.type) != null ? _ref3 : null;
      } else if (options) {
        this.value = options;
=======
  qname = function(n, tns) {
    var name, ns, _i, _ref, _ref1;
    _ref = n.split(':'), ns = 2 <= _ref.length ? __slice.call(_ref, 0, _i = _ref.length - 1) : (_i = 0, []), name = _ref[_i++];
    return {
      ns: (_ref1 = ns.join('') || tns) != null ? _ref1 : null,
      name: name
    };
  };

  SimpleType = (function() {

    function SimpleType(name, options) {
      var _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      this.name = name != null ? name : '';
      this.attributes = (_ref = options.attributes) != null ? _ref : {};
      this.minOccurs = (_ref1 = options.minOccurs) != null ? _ref1 : 1;
      this.maxOccurs = (_ref2 = options.maxOccurs) != null ? _ref2 : 1;
      if ((_ref3 = this.value) == null) {
        this.value = (_ref4 = (_ref5 = options.value) != null ? _ref5 : options["default"]) != null ? _ref4 : void 0;
>>>>>>> SOAP implementation under construction, bug fixes
      }
    }

    SimpleType.prototype.isValid = function() {
      if (this.minOccurs > 0 && this.value === void 0) {
        return false;
      } else {
        return true;
      }
    };

    SimpleType.prototype.setValue = function(val) {
      return this.value = val;
    };

    SimpleType.prototype.setAttr = function(key, val) {
      return this.attributes[key] = val;
    };

    SimpleType.prototype.set = function(key, val) {
      if (arguments.length === 1) {
        this.setValue(key);
      } else if (key === '=' || key === 'value') {
        this.setValue(val);
      } else if (key === '@') {
        this.attributes = val;
      } else if (key.indexOf('@') === 0) {
        this.setAttr(key.slice(1), val);
      }
      return this;
    };

    SimpleType.prototype.toXML = function() {
      var obj;
      obj = {};
      return obj[this.name] = {
        '@': this.attributes,
        '=': this.value
      };
    };

    SimpleType.prototype.toString = function() {
      var attrs, k, v;
      attrs = ' ' + ((function() {
        var _ref, _results;
        _ref = this.attributes;
        _results = [];
        for (k in _ref) {
          v = _ref[k];
          _results.push("" + k + "=\"" + v + "\"");
        }
        return _results;
      }).call(this)).join(' ');
      switch (this.value) {
        case void 0:
          return "<" + this.name + attrs + "/>";
        case null:
          return "<" + this.name + attrs + "></" + this.name + ">";
        default:
          return "<" + this.name + attrs + ">" + (this.value.toString()) + "</" + this.name + ">";
      }
    };

    return SimpleType;

  })();

  module.exports = {
    parse: parseXML,
    render: renderXML,
    verify: verifyXML,
    escape: escapeXML,
    cdata: cdata,
    qname: qname,
    SimpleType: SimpleType
  };

}).call(this);
