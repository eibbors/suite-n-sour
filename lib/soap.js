// Generated by CoffeeScript 1.3.3
(function() {
  var BOOTSTRAP_XMLNS, ComplexType, EnumType, SoapParam, SoapRequest, rpc, wsdl, xml, xsd,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  rpc = require('./rpc');

  xml = require('./xml');

  wsdl = require('./wsdl/index');

  xsd = {};

  xsd.String = (function(_super) {

    __extends(String, _super);

    function String() {
      return String.__super__.constructor.apply(this, arguments);
    }

    String.prototype.setValue = function(val) {
      return String.__super__.setValue.call(this, val.toString());
    };

    return String;

  })(xml.SimpleType);

  xsd.Boolean = (function(_super) {

    __extends(Boolean, _super);

    function Boolean() {
      return Boolean.__super__.constructor.apply(this, arguments);
    }

    Boolean.prototype.setValue = function(val) {
      return this.value = val ? 'T' : 'F';
    };

    return Boolean;

  })(xml.SimpleType);

  xsd.Number = (function(_super) {

    __extends(Number, _super);

    function Number() {
      return Number.__super__.constructor.apply(this, arguments);
    }

    Number.prototype.setValue = function(val) {
      return this.value = Number(val);
    };

    Number.prototype.isValid = function() {
      return Number.isNaN(val);
    };

    return Number;

  })(xml.SimpleType);

  xsd.DateTime = (function(_super) {

    __extends(DateTime, _super);

    function DateTime() {
      return DateTime.__super__.constructor.apply(this, arguments);
    }

    DateTime.prototype.setValue = function(val) {};

    return DateTime;

  })(xml.SimpleType);

  EnumType = (function(_super) {

    __extends(EnumType, _super);

    function EnumType(name, restriction, options) {
      var _ref;
      this.name = name;
      this.restriction = restriction;
      EnumType.__super__.constructor.call(this, this.name, this.value, options);
      this.restriction = (_ref = options.restriction) != null ? _ref : [];
    }

    EnumType.prototype.setValue = function(val) {
      if (__indexOf.call(this.restriction, val) >= 0) {
        return this.value = val;
      }
    };

    return EnumType;

  })(xml.SimpleType);

  ComplexType = (function(_super) {

    __extends(ComplexType, _super);

    function ComplexType(name, options) {
      var k, v, _ref, _ref1, _ref2;
      this.name = name;
      this.type = (_ref = value.type) != null ? _ref : 'tns:ComplexType';
      this.attributes = (_ref1 = options.attributs) != null ? _ref1 : {};
      this.elements = {};
      _ref2 = options.elements;
      for (k in _ref2) {
        v = _ref2[k];
        this.defElem(k, v);
      }
      if (options.value) {
        setValues(options.value);
      }
    }

    ComplexType.prototype.defElem = function(name, type) {
      switch (value.type) {
        case 'xsd:string':
          return this.elements[name] = new xsd.String(name, value);
        case 'xsd:double':
        case 'xsd:int':
        case 'xsd:long':
          return this.elements[name] = new xsd.Number(name, value);
        case 'xsd:boolean':
          return this.elements[name] = new xsd.Boolean(name, value);
        case 'xsd:dateTime':
          return this.elements[name] = new xsd.DateTime(name, value);
        case 'xsd:base64Binary':
          break;
        default:
          if (value["enum"] != null) {
            return this.elements[name] = new EnumType(name, value);
          } else {
            return this.elements[name] = new ComplexType(name, value);
          }
      }
    };

    ComplexType.prototype.setField = function(field, val) {
      if (this.elements[field] != null) {
        return this.elements[field].setValue(val);
      } else if (this.attributes[field] != null) {
        return this.setAttr(field, val);
      }
    };

    ComplexType.prototype.setValues = function(obj) {
      var k, v, _results;
      _results = [];
      for (k in obj) {
        v = obj[k];
        _results.push(this.elements[k].setValue(v));
      }
      return _results;
    };

    ComplexType.prototype.toString = function() {
      var el, k, v, val, _ref;
      val = "<" + name;
      _ref = this.attributes;
      for (k in _ref) {
        v = _ref[k];
        val += " " + k + "=\"" + v + "\"";
      }
      val += ">" + (((function() {
        var _ref1, _results;
        _ref1 = this.elements;
        _results = [];
        for (k in _ref1) {
          el = _ref1[k];
          _results.push(el.toString());
        }
        return _results;
      }).call(this)).join('\n')) + "</" + this.name + ">";
      return val;
    };

    return ComplexType;

  })(xml.SimpleType);

  BOOTSTRAP_XMLNS = {
    soap: "http://schemas.xmlsoap.org/soap/envelope/",
    platformMsgs: "urn:messages_2012_2.platform.webservices.netsuite.com",
    platformCore: "urn:core_2012_2.platform.webservices.netsuite.com"
  };

  SoapParam = (function() {

    function SoapParam(type, attributes, elements) {
      this.type = type;
      this.attributes = attributes;
      this.elements = elements;
    }

    return SoapParam;

  })();

  SoapRequest = (function() {

    function SoapRequest(options) {
      this.namespaces = BOOTSTRAP_XMLNS;
      this.header = {};
      this.body = {};
    }

    SoapRequest.prototype.setHeader = function(name, param) {
      addNamespace(param);
      return this.header[name] = param;
    };

    SoapRequest.prototype.addNamespace = function(param) {
      var k, v, _base, _base1, _name, _name1, _ref, _ref1, _ref2;
      if (param.nsId && param.urn) {
        if ((_ref = (_base = this.namespaces)[_name = param.nsId]) == null) {
          _base[_name] = param.urn;
        }
      } else if (param.nsId) {
        if ((_ref1 = (_base1 = this.namespaces)[_name1 = param.nsId]) == null) {
          _base1[_name1] = wsdl.fetchNamespace(param.type).urn;
        }
      } else if (param.urn) {
        _ref2 = this.namespaces;
        for (k in _ref2) {
          v = _ref2[k];
          if (v === param.urn) {
            param.nsId = k;
            break;
          }
        }
      }
      return param;
    };

    return SoapRequest;

  })();

}).call(this);
