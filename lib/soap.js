// Generated by CoffeeScript 1.3.3
(function() {
  var ComplexType, EnumType, QName, dump, p, ref, resolveSchema, rpc, util, wsdl, x, xml, xmlns, xsd,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  rpc = require('./rpc');

  xml = require('./xml');

  wsdl = require('./wsdl/index');

  xmlns = require('./wsdl/xmlns');

  QName = (function() {

    function QName(namespace, name, uri) {
      var parts, _ref, _ref1;
      this.namespace = namespace;
      this.name = name;
      this.uri = uri;
      if (arguments.length === 1 && this.namespace.indexOf(":") > 0) {
        parts = this.namespace.split(':');
        this.namespace = parts[0];
        this.name = parts.slice(1);
      }
      if ((_ref = this.namespace) == null) {
        this.namespace = 'tns';
      }
      if ((_ref1 = this.uri) == null) {
        this.uri = xmlns.resolveNamespace(this.namespace);
      }
    }

    return QName;

  })();

  xsd = {};

  xsd.String = (function(_super) {

    __extends(String, _super);

    function String() {
      return String.__super__.constructor.apply(this, arguments);
    }

    String.prototype.setValue = function(val) {
      return String.__super__.setValue.call(this, val.toString());
    };

    return String;

  })(xml.SimpleType);

  xsd.Boolean = (function(_super) {

    __extends(Boolean, _super);

    function Boolean() {
      return Boolean.__super__.constructor.apply(this, arguments);
    }

    Boolean.prototype.setValue = function(val) {
      return this.value = val ? 'T' : 'F';
    };

    return Boolean;

  })(xml.SimpleType);

  xsd.Number = (function(_super) {

    __extends(Number, _super);

    function Number() {
      return Number.__super__.constructor.apply(this, arguments);
    }

    Number.prototype.setValue = function(val) {
      return this.value = Number(val);
    };

    Number.prototype.isValid = function() {
      return Number.isNaN(val);
    };

    return Number;

  })(xml.SimpleType);

  xsd.DateTime = (function(_super) {

    __extends(DateTime, _super);

    function DateTime() {
      return DateTime.__super__.constructor.apply(this, arguments);
    }

    DateTime.prototype.setValue = function(val) {
      if (val instanceof Date) {
        return this.value = val;
      } else if (val) {
        return this.value = new Date(Date.parse(val));
      } else {
        return this.value = new Date();
      }
    };

    DateTime.prototype.toString = function() {
      var attrs, k, v;
      if (this.value == null) {
        return DateTime.__super__.toString.call(this);
      }
      attrs = ' ' + ((function() {
        var _ref, _results;
        _ref = this.attributes;
        _results = [];
        for (k in _ref) {
          v = _ref[k];
          _results.push("" + k + "=\"" + v + "\"");
        }
        return _results;
      }).call(this)).join(' ');
      return "<" + this.name + attrs + ">" + (this.value.toUTCString()) + "</" + this.name + ">";
    };

    return DateTime;

  })(xml.SimpleType);

  EnumType = (function(_super) {

    __extends(EnumType, _super);

    function EnumType(name, type, options) {
      var _ref;
      this.name = name;
      this.type = type;
      EnumType.__super__.constructor.call(this, this.name, this.value, options);
      this.qname = new Qname(this.type);
      this.restriction = (_ref = options.restriction) != null ? _ref : [];
    }

    EnumType.prototype.setValue = function(val) {
      if (__indexOf.call(this.restriction, val) >= 0) {
        return this.value = val;
      }
    };

    return EnumType;

  })(xsd.String);

  ComplexType = (function(_super) {

    __extends(ComplexType, _super);

    function ComplexType(name, type, options) {
      var k, v, _ref, _ref1;
      this.name = name;
      this.type = type != null ? type : 'tns:ComplexType';
      this.qname = new Qname(this.type);
      this.attributes = (_ref = options.attributs) != null ? _ref : {};
      this.elements = {};
      _ref1 = options.elements;
      for (k in _ref1) {
        v = _ref1[k];
        this.defElem(k, v);
      }
      if (options.value) {
        setValues(options.value);
      }
    }

    ComplexType.prototype.defElem = function(name, type) {
      switch (value.type) {
        case 'xsd:string':
          return this.elements[name] = new xsd.String(name, value);
        case 'xsd:double':
        case 'xsd:int':
        case 'xsd:long':
          return this.elements[name] = new xsd.Number(name, value);
        case 'xsd:boolean':
          return this.elements[name] = new xsd.Boolean(name, value);
        case 'xsd:dateTime':
          return this.elements[name] = new xsd.DateTime(name, value);
        case 'xsd:base64Binary':
          break;
        default:
          if (value["enum"] != null) {
            return this.elements[name] = new EnumType(name, value);
          } else {
            return this.elements[name] = new ComplexType(name, value);
          }
      }
    };

    ComplexType.prototype.setField = function(field, val) {
      if (this.elements[field] != null) {
        return this.elements[field].setValue(val);
      } else if (this.attributes[field] != null) {
        return this.setAttr(field, val);
      }
    };

    ComplexType.prototype.setValues = function(obj) {
      var k, v, _results;
      _results = [];
      for (k in obj) {
        v = obj[k];
        _results.push(this.elements[k].setValue(v));
      }
      return _results;
    };

    ComplexType.prototype.toString = function() {
      var el, k, v, val, _ref;
      val = "<" + name;
      _ref = this.attributes;
      for (k in _ref) {
        v = _ref[k];
        val += " " + k + "=\"" + v + "\"";
      }
      val += ">" + (((function() {
        var _ref1, _results;
        _ref1 = this.elements;
        _results = [];
        for (k in _ref1) {
          el = _ref1[k];
          _results.push(el.toString());
        }
        return _results;
      }).call(this)).join('\n')) + "</" + this.name + ">";
      return val;
    };

    return ComplexType;

  })(xml.SimpleType);

  util = require('util');

  dump = function() {
    var o, obj, _i, _len, _results;
    obj = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _results = [];
    for (_i = 0, _len = obj.length; _i < _len; _i++) {
      o = obj[_i];
      _results.push(console.log(util.inspect(o, true, 10)));
    }
    return _results;
  };

  resolveSchema = function(type) {
    var b, defs, k, schema, v, xns, _ref;
    dump(xns = xmlns.resolveNamespace(type));
    defs = wsdl.schemas[xns.nsId].complexTypes;
    schema = (_ref = defs[xns.local]) != null ? _ref : null;
    if ((schema != null ? schema.base : void 0) != null) {
      dump(schema.base);
      dump(b = resolveSchema(schema.base));
      for (k in b) {
        v = b[k];
        schema[k] = v;
      }
    }
    return schema;
  };

  dump(x = resolveSchema('LoginRequest'));

  dump(p = resolveSchema('Passport'));

  dump(ref = resolveSchema('platformCore:RecordRef'));

}).call(this);
